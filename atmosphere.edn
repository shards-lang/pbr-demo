(defshards precompute-sky-fs []
  (Shader.Literal :Type ShaderLiteralType.Header :Source (slurp "shaders/atmosphere.wgsl"))
  (Shader.ReadInput "worldNormal") (Math.Normalize) >= .ray-dir
  (Float3 0) >= .ray-start
  9999999999999.0 >= .ray-length

  (Shader.ReadBuffer "lightDir") >= .light-dir
  (Shader.ReadBuffer "lightColor") >= .light-color

  (Shader.Literal ["
  let _DrawPlanet = 0;
  if (_DrawPlanet == 1) {
    let planetIntersection = PlanetIntersection(" .ray-start ", " .ray-dir ");
    if (planetIntersection.x > 0.0) { " .ray-length " = min (" .ray-length ", planetIntersection.x); }
  }"])
  
  (Shader.Literal "var transmittance : vec3<f32> = vec3<f32>(0.0);")
  (Shader.Literal ["IntegrateScattering(" .ray-start ", " .ray-dir ", " .ray-length ", " .light-dir ", " .light-color ", &transmittance)"] :OutputDimension 3)
  (ToFloat4) (Math.Add (Float4 0 0 0 1))
  (Shader.WriteOutput "color"))

(defshards sky-fs []
  ; Just sample the cubemap
  (Shader.ReadInput "worldNormal") >= .world-normal
  (Shader.SampleTextureCoord "sky")
  (Shader.WriteOutput "color")

  ; NOTE: Write depth to compare to (>=) and render sky where it passes
  1.0 (Shader.WriteOutput "depth"))

(defloop precompute-sky
  (Setup
   {
    :Params {:lightDir .light-direction
             :lightColor .light-color}
    :Shaders [{:Stage ProgrammableGraphicsStage.Fragment
               :EntryPoint (precompute-sky-fs)}]} (GFX.Feature) >= .filter-feature
   (GFX.Texture :Format TextureFormat.RGBA8UnormSrgb :Resolution (Int2 1024) :Dimension TextureDimension.Cube) >= .sky-cube-tex
   (filter-cubemap .filter-feature .sky-cube-tex 0))

  {:sky .sky-cube-tex})

(defshards setup-skybox-pass []
  (GFX.BuiltinFeature :Id BuiltinFeatureId.Transform) >> .sky-features
  {:Shaders [{:Stage ProgrammableGraphicsStage.Vertex
              :EntryPoint (sky-sphere-vs)
              :After ["initScreenPosition"]
              :Before ["writePosition"]}
             {:Stage ProgrammableGraphicsStage.Fragment
              :EntryPoint (sky-fs)}]
   :State {:FlipFrontFace true :DepthWrite false :DepthCompare CompareFunction.LessEqual}}
  (GFX.Feature :ViewGenerators precompute-sky) >> .sky-features

  {:Features .sky-features :Queue .sky-sphere-queue} (GFX.DrawablePass))
